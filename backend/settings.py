# encrypted-file-transfer/backend/settings.py
"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import logging

# Assuming all backend Django files are in /app
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-d(7j9=&*)w%-m4bj!u9x3f68!zp58)px16+du#6a(r^!3(#h_e')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
CORS_ALLOW_CREDENTIALS = True

ALLOWED_HOSTS = [os.environ.get('ALLOWED_HOSTS', 'localhost'), '0.0.0.0', 'test-server-0.click', 'api.test-server-0.click',]

CSRF_TRUSTED_ORIGINS = [
    # environment variable for the frontend URL
    os.environ.get('FRONTEND_URL', f'http://localhost:{os.environ.get("FRONTEND_PORT", "3000")}'),
    'https://test-server-0.click', 'http://test-server-0.click', 'http://localhost:80', 'https://localhost:80',
    'https://localhost:3000', 
]

CORS_ORIGIN_WHITELIST = [
    'https://localhost:3000',
    'http://localhost:3000',
    'https://localhost:80',
    'http://localhost:80',
    'https://test-server-0.click',
    'http://test-server-0.click',
]

# What's the difference between CSRF_TRUSTED_ORIGINS and CORS_ALLOWED_ORIGINS?
# CSRF_TRUSTED_ORIGINS is used to specify which origins are allowed to send
# cross-site requests. This is important for security reasons, as it helps
# prevent cross-site request forgery (CSRF) attacks. If you're using Django's
# CSRF protection middleware, you'll need to specify the origins that are
# allowed to send requests to your site. This is done by setting the
# CSRF_TRUSTED_ORIGINS setting in your Django settings file.
#
# CORS_ALLOWED_ORIGINS, on the other hand, is used to specify which origins
# are allowed to make cross-origin requests to your site. This is important
# for allowing requests from different domains, such as when you're building
# a frontend application that needs to make requests to a backend API. If you're
# using Django's CORS middleware, you'll need to specify the origins that are
# allowed to make requests to your site. This is done by setting the
# CORS_ALLOWED_ORIGINS setting in your Django settings file.
CORS_ALLOWED_ORIGINS = [
    os.environ.get('FRONTEND_URL', f'http://localhost:{os.environ.get("FRONTEND_PORT", "3000")}'),
    'http://test-server-0.click', 'https://test-server-0.click', 'https://test-server-0.click:80'
]

SESSION_COOKIE_AGE = 60

CSRF_COOKIE_HTTPONLY = True

SESSION_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'

CSRF_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_COOKIE_SAMESITE = 'None'


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "corsheaders",
    'debug_toolbar',
    'rest_framework',
    'knox',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "core.middleware.RequestLoggingMiddleware",
]

DEBUG_TOOLBAR_PANELS = [
    'debug_toolbar.panels.headers.HeadersPanel',
    'debug_toolbar.panels.request.RequestPanel',
]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'knox.auth.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

ROOT_URLCONF = "urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Test Db:
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'myprojectdb',
#         'USER': 'derek',
#         'PASSWORD': 'postgres',
#         'HOST': 'db',
#         'PORT': '5432',
#     }
# }

# Production DB:
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get('DB_NAME', 'myprojectdb'),  # Default value is 'myproject-db'
        "USER": os.environ.get('DB_USER', 'derek'),  # Default value is 'postgres'
        "PASSWORD": os.environ.get('DB_PASSWORD', 'postgres'), 
        "HOST": os.environ.get('DB_HOST', 'localhost'),
        "PORT": os.environ.get('DB_PORT', '5432'),  # Default value is '5432'
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

INTERNAL_IPS = [
    '127.0.0.1',
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static URL is only used for development and not for
# production, ie serving our React app using Nginx.
STATIC_URL = '/static/'

# Directory where Django will store collected static files
# Adjust if necessary to match your desired path for static files

# REACT_APP_DIR isn't needed since we're serving our React app using Nginx.
# REACT_APP_DIR is a variable that points to the build directory
# of our React app. It's used in cases whenever you'd want your
# backend to serve the frontend as well. In this case, we're
# offloading this responsibility to Nginx, and using Django
# solely for backend functionality.
# REACT_APP_DIR = os.path.join(BASE_DIR, 'frontend/build')

# Directory where Django will store collected static files.
# This application doesn't store static files, as they are
# passed from the front end to the backend as blobs. A blob is
# essentially binary data that is only temporarily stored in memory
# for encrypting and decrypting, and is not stored on the server.
# It was only added here because Django gets angry if it's not there.
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Logging added for spotting AWS RDS connection issues and other
# potential problems during the deployment process.
LOGGING = {
    'version': 1,
    'handlers': {
        'console': { 
            'level': 'DEBUG',
            'class': 'logging.StreamHandler', 
        },
    },
    'loggers': {
        'django': { 
            'handlers': ['console'], 
            'level': 'DEBUG',
            'propagate': True, 
        },
    },
}
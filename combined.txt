### File: ./docker-compose.dev.yml

version: '3.8'

services:
  db:
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: myprojectdb
      POSTGRES_USER: derek
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: bash -c "python manage.py makemigrations && python manage.py migrate && gunicorn wsgi:application --bind 0.0.0.0:8000"
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db

  frontend:
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend

volumes:
  postgres_data:


### File: ./default.conf

# encrypted-file-transfer/default.conf

# This is the default configuration file for the Nginx server
# It is used to specify the server configuration and routing rules
# for the frontend and backend services.

resolver 172.30.0.2 valid=10s;
server {
    listen 80;
    server_name 18.117.7.136; # Replace with actual domain or IP after instance creation

    # Serve static files directly
    location / {
        root /usr/share/nginx/html;
        index index.html index.html;
        try_files $uri $uri/ /index.html;
    }

    # Proxy API requests to the backend
    location /api/ {
        # proxy_pass should be setup such that AWS Service Connect Services on ECS can be used
        proxy_pass http://backend:8000/api/;
        proxy_http_version 1.1;

        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Important: This ensures the URI is passed correctly
        proxy_redirect off;

        # Add CORS headers
        add_header 'Access-Control-Allow-Origin' '*'; # Replace this with the appropriate frontend domain when possible
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, PATCH, DELETE';
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization';
    }

    # Add headers for security enhancements
    add_header X-Frame-Options "DENY";
    add_header X-Content-Type-Options "nosniff";
    add_header Referrer-Policy "same-origin";
    add_header Cross-Origin-Opener-Policy "same-origin";
}

### File: ./docker-compose.yml

version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: gunicorn wsgi:application --bind 0.0.0.0:8000
    ports:
      - "8000:8000"
    env_file:
      - .env

### File: ./frontend/index.html

<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <link rel="icon" type="image/svg+xml" href="/vite.svg">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="theme-color" content="#000000">
    <link rel="apple-touch-icon" href="/logo192.png">
    <link rel="manifest" href="/manifest.json">
    <!-- Bootstrap CSS CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <title>Encrypted File Transfer</title>
</head>
<body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!-- Bootstrap Bundle with Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    <script type="module" src="/src/main.jsx"></script>
</body>
</html>


### File: ./frontend/.eslintrc.cjs

module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}


### File: ./frontend/vite.config.js

import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// Configuring the server's default port
export default defineConfig({
  server: {
    port: 3000
  },
  plugins: [react()]
});


### File: ./frontend/src/index.css

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.UUID-label {
  font-size: 0.5em;
  margin: 10px;
}

.inline-container {
  display: flex;
  align-items: center;
  margin: 0px;
  padding: 0px;
}

input[type="file"] {
  flex-grow: 0;
}

.inline-container > div {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

#uuidInput {
  width: 100%;
  padding: 12px 20px;
  margin: 8px 0;
  display: inline-block;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  text-align: center;
}

### File: ./frontend/src/main.jsx

import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import App from './App';
import './index.css';
import { UserProvider } from './contexts/UserContext.jsx';

// BrowserRouter and UserProvider are used to provide routing and user context to the entire application.
// User context means that the user's login status is available to all components at all times (if logged in).
// When we give context to something, we are providing it with the ability to access the context's data.
// In this case, the UserProvider component provides the UserContext to all of its children.
// For us, this child is the entire application, which is wrapped in the UserProvider component.
ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <UserProvider>
        <App />
      </UserProvider>
    </BrowserRouter>
  </React.StrictMode>
);


### File: ./frontend/src/App.jsx

import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import LandingPage from './pages/LandingPage';
import LoginPage from './pages/LoginPage';
import RegisterPage from './pages/RegisterPage';
import AboutPage from './pages/AboutPage';
import './styles/App.css'; // Global Styles

// This serves as the router for our different views (pages).
function App() {
  return (
      <Routes>
        <Route path="/" element={<LandingPage />} />
        <Route path="/login" element={<LoginPage />} />
        <Route path="/register" element={<RegisterPage />} />
        <Route path="/about" element={<AboutPage />} />
      </Routes>
  );
}

export default App;


### File: ./frontend/src/contexts/UserContext.jsx

import React, { createContext, useState, useContext, useEffect } from 'react';

const UserContext = createContext(null);

export const useUser = () => useContext(UserContext);

export const UserProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [error, setError] = useState(null);

    useEffect(() => {
        // Log when the context value changes
        console.log("User context value has changed:", user);
    }, [user]);

    const login = (username) => {
        try {
            setUser({ username });
            console.log(`Logged in as ${username}`);
        } catch (e) {
            console.error("Login failed:", e);
            setError(e);
        }
    };

    const logout = () => {
        try {
            setUser(null);
            console.log("Logged out");
        } catch (e) {
            console.error("Logout failed:", e);
            setError(e);
        }
    };

    if (error) {
        console.error("An error occurred in UserProvider:", error);
        // Optionally render an error state
        // return <div>Error! {error.message}</div>;
    }

    return (
        <UserContext.Provider value={{ user, login, logout }}>
            {children}
        </UserContext.Provider>
    );
};


### File: ./frontend/src/styles/LandingPage.css

.dark-mode {
    background-color: #343a40;
    color: #f8f9fa;
}

.dark-mode .navbar-light .navbar-nav .nav-link {
    color: #f8f9fa !important; /* Ensure nav links are visible in dark mode */
}

.btn-dark-mode-toggle {
    background-color: #343a40;
    color: #f8f9fa;
    border-color: #f8f9fa; /* Ensure the button is visible against the navbar */
}

.navbar-light .btn-dark-mode-toggle {
    background-color: #343a40;
    color: #f8f9fa;
}

/* Ensures navbar stays light in dark mode */
.dark-mode .navbar-light {
    background-color: #f8f9fa;
    color: #343a40;
}


### File: ./frontend/src/styles/LoginPage.css



### File: ./frontend/src/styles/App.css

/* App.css */
.App {
  text-align: center;
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-start;
  font-size: calc(10px + 2vmin);
  color: white;
  padding-top: 50px;
}

.App-header {
  background-color: #404040;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  margin: 20px 0;
  width: 80%;
  max-width: 600px;
}

input[type="file"] {
  margin: 10px 0;
}

.uuid-box {
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 10px;
  margin: 15px;
}

.radio-btn {
  font-size: 0.44em;
}

button {
  background-color: #1d9e33;
  border: none;
  border-radius: 5px;
  padding: 10px 20px;
  color: #fff;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #51df68;
}

.submit-button-container {
  display: flex;
  justify-content: center;
  margin-top: 10px;
}

.uuid-input-container {
  text-align: center;
  margin-top: 20px;
}

.tips-title {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
}

.tips-section {
  background-color: #404040;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
  margin: 20px 0;
  width: 80%;
  max-width: 600px;
  color: #ccc;
  text-align: left;
  font-size: 0.5em;
}

.tips-section ol {
  counter-reset: list-counter;
  list-style-type: none;
  padding-left: 20px;
}

.tips-section ol li {
  counter-increment: list-counter;
  margin-bottom: 10px;
}

.tips-section ol li::before {
  content: counter(list-counter) ". ";
  font-weight: bold;
  margin-right: 5px;
}

.tips-section p {
  margin-bottom: 20px;
  font-weight: bold;
}


### File: ./frontend/src/styles/RegisterPage.css



### File: ./frontend/src/components/Layout.jsx

import React, { useState } from 'react';
//import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { useUser } from '../contexts/UserContext';
import '../styles/LandingPage.css';

function Layout({ children }) {
    const { user, logout } = useUser();
    const [darkMode, setDarkMode] = useState(true);
    const toggleDarkMode = () => setDarkMode(!darkMode);

    return (
        <div className={`min-vh-100 ${darkMode ? 'dark-mode' : ''}`}>
            <nav className="navbar navbar-expand-lg navbar-light bg-light">
                <div className="container-fluid">
                    <Link className="navbar-brand" to="/">Encrypted File Transfer</Link>
                    <Link className="nav-link text-secondary" to="/about">About</Link>
                    <div className="d-flex align-items-center">
                        {user ? (
                            <>
                                <span className="navbar-text">
                                    Logged in as {user.username}
                                </span>
                                <button onClick={logout} className="btn btn-secondary ms-2">Logout</button>
                            </>
                        ) : (
                            <div className="ms-auto d-flex align-items-center">
                                <Link className="nav-link text-secondary" to="/login">Login</Link>
                                <Link className="nav-link text-secondary" to="/register">Register</Link>
                            </div>
                        )}
                        <button onClick={toggleDarkMode} className="btn btn-sm btn-dark-mode-toggle ms-2">
                            {darkMode ? 'Light Mode' : 'Dark Mode'}
                        </button>
                    </div>
                </div>
            </nav>
            {children}
        </div>
    );
}

export default Layout;


### File: ./frontend/src/pages/LoginPage.jsx

import React from 'react';
import { Link } from 'react-router-dom';
import Layout from '../components/Layout';

function LoginPage() {
  return (
    <Layout>
      <div className="container mt-3">
        <div className="row">
          <div className="col-md-3">
            {/* Left column content */}
          </div>
          <div className="col-md-6 justify-content-center" style={{ minHeight: 'calc(100vh - 56px)' }}>
            <div className="text-center mt-5 bg-secondary ps-5 pe-5 pb-5 pt-3 rounded shadow">
              <h2>Welcome to Secure File Transfer</h2>
              <p>This application allows you to securely send files to other users.<br></br>Login or register to get started!</p>
              <Link to="/login" className="btn btn-primary mx-1">Login</Link>
              <Link to="/register" className="btn btn-success mx-1">Register</Link>
            </div>
          </div>
          <div className="col-md-3">
            {/* Right column content */}
          </div>
        </div>
      </div>
    </Layout>
  );
}

export default LoginPage;


### File: ./frontend/src/pages/RegisterPage.jsx

import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import Layout from '../components/Layout';
import { useUser } from '../contexts/UserContext';

function RegisterPage() {
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const navigate = useNavigate();
    const { login } = useUser();

    const handleSubmit = async (e) => {
        e.preventDefault();
        console.log("Attempting to register:", { username, email });
        
        try {
            const response = await fetch('/api/register/', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, email, password }),
            });

            if (response.ok) {
                const data = await response.json();
                console.log("Registration successful, server data:", data);
                login(username);
                navigate('/');
                alert("Registration successful");
            } else {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
        } catch (error) {
            console.error("Error during registration: ", error);
            alert("Registration failed: " + error.message);
        }
    };

    return (
        <Layout>
            <div className="container mt-3">
                <div className="row">
                    <div className="col-md-6 offset-md-3">
                        <form onSubmit={handleSubmit}>
                            <input type="text" placeholder="Username" value={username} onChange={e => setUsername(e.target.value)} required />
                            <input type="email" placeholder="Email" value={email} onChange={e => setEmail(e.target.value)} required />
                            <input type="password" placeholder="Password" value={password} onChange={e => setPassword(e.target.value)} required />
                            <button type="submit" className="btn btn-success">Register</button>
                        </form>
                    </div>
                </div>
            </div>
        </Layout>
    );
}

export default RegisterPage;


### File: ./frontend/src/pages/LandingPage.jsx

import React from 'react';
import { Link } from 'react-router-dom';
import Layout from '../components/Layout';

function LandingPage() {
  return (
    <Layout>
      <div className="container mt-12">
        <div className="row">
          <div className="col-md-1">
            {/* Left column content */}
          </div>
          <div className="col-md-10 justify-content-center" style={{ minHeight: 'calc(100vh - 56px)' }}>
            <div className="text-center mt-5 bg-secondary ps-5 pe-5 pb-5 pt-3 rounded shadow">
              <h1>Welcome to Secure File Transfer</h1>
              <p>This application allows you to securely send files to other users.<br></br>Login or register to get started!</p>
              <Link to="/login" className="btn btn-primary mx-1">Login</Link>
              <Link to="/register" className="btn btn-success mx-1">Register</Link>
            </div>
          </div>
          <div className="col-md-1">
            {/* Right column content */}
          </div>
        </div>
      </div>
    </Layout>
  );
}

export default LandingPage;


### File: ./frontend/src/pages/AboutPage.jsx

import React from 'react';
import { Link } from 'react-router-dom';
import Layout from '../components/Layout';

function LandingPage() {
  return (
    <Layout>
      <div className="container mt-12">
        <div className="row">
          <div className="col-md-1">
            {/* Left column content */}
          </div>
          <div className="col-md-10 justify-content-center" style={{ minHeight: 'calc(100vh - 56px)' }}>
            <div className="text-center mt-5 bg-secondary ps-5 pe-5 pb-5 pt-3 rounded shadow">
              <h1>Welcome to Secure File Transfer</h1>
              <p>This application allows you to securely send files to other users.<br></br>Login or register to get started!</p>
              <Link to="/login" className="btn btn-primary mx-1">Login</Link>
              <Link to="/register" className="btn btn-success mx-1">Register</Link>
            </div>
          </div>
          <div className="col-md-1">
            {/* Right column content */}
          </div>
        </div>
      </div>
    </Layout>
  );
}

export default LandingPage;


### File: ./backend/asgi.py

"""
ASGI config for backend project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")

application = get_asgi_application()


### File: ./backend/__init__.py



### File: ./backend/apps.py

from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "core"


### File: ./backend/settings.py

# encrypted-file-transfer/backend/settings.py
"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import logging

# Assuming all backend Django files are in /app
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-d(7j9=&*)w%-m4bj!u9x3f68!zp58)px16+du#6a(r^!3(#h_e')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [os.environ.get('ALLOWED_HOSTS', 'localhost'), '0.0.0.0']

# I hate cors... so I'm just going to allow all origins for now.
CORS_ORIGIN_ALLOW_ALL = True

CSRF_TRUSTED_ORIGINS = [
    # environment variable for the frontend URL
    os.environ.get('FRONTEND_URL', f'http://localhost:{os.environ.get("FRONTEND_PORT", "3000")}'),
]

# What's the difference between CSRF_TRUSTED_ORIGINS and CORS_ALLOWED_ORIGINS?
# CSRF_TRUSTED_ORIGINS is used to specify which origins are allowed to send
# cross-site requests. This is important for security reasons, as it helps
# prevent cross-site request forgery (CSRF) attacks. If you're using Django's
# CSRF protection middleware, you'll need to specify the origins that are
# allowed to send requests to your site. This is done by setting the
# CSRF_TRUSTED_ORIGINS setting in your Django settings file.
#
# CORS_ALLOWED_ORIGINS, on the other hand, is used to specify which origins
# are allowed to make cross-origin requests to your site. This is important
# for allowing requests from different domains, such as when you're building
# a frontend application that needs to make requests to a backend API. If you're
# using Django's CORS middleware, you'll need to specify the origins that are
# allowed to make requests to your site. This is done by setting the
# CORS_ALLOWED_ORIGINS setting in your Django settings file.
CORS_ALLOWED_ORIGINS = [
    os.environ.get('FRONTEND_URL', f'http://localhost:{os.environ.get("FRONTEND_PORT", "3000")}'),
]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "corsheaders",
    'rest_framework_simplejwt.token_blacklist',
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

ROOT_URLCONF = "urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Test Db:
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'myprojectdb',
#         'USER': 'derek',
#         'PASSWORD': 'postgres',
#         'HOST': 'db',
#         'PORT': '5432',
#     }
# }

# Production DB:
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get('DB_NAME', 'myprojectdb'),  # Default value is 'myproject-db'
        "USER": os.environ.get('DB_USER', 'derek'),  # Default value is 'postgres'
        "PASSWORD": os.environ.get('DB_PASSWORD', 'postgres'), 
        "HOST": os.environ.get('DB_HOST', 'localhost'),
        "PORT": os.environ.get('DB_PORT', '5432'),  # Default value is '5432'
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static URL is only used for development and not for
# production, ie serving our React app using Nginx.
STATIC_URL = '/static/'

# Directory where Django will store collected static files
# Adjust if necessary to match your desired path for static files

# REACT_APP_DIR isn't needed since we're serving our React app using Nginx.
# REACT_APP_DIR is a variable that points to the build directory
# of our React app. It's used in cases whenever you'd want your
# backend to serve the frontend as well. In this case, we're
# offloading this responsibility to Nginx, and using Django
# solely for backend functionality.
# REACT_APP_DIR = os.path.join(BASE_DIR, 'frontend/build')

# Directory where Django will store collected static files.
# This application doesn't store static files, as they are
# passed from the front end to the backend as blobs. A blob is
# essentially binary data that is only temporarily stored in memory
# for encrypting and decrypting, and is not stored on the server.
# It was only added here because Django gets angry if it's not there.
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


SIMPLE_JWT = {
     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=10),
     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
     'ROTATE_REFRESH_TOKENS': True,
     'BLACKLIST_AFTER_ROTATION': True
}


# Logging added for spotting AWS RDS connection issues and other
# potential problems during the deployment process.
LOGGING = {
    'version': 1,
    'handlers': {
        'console': { 
            'level': 'DEBUG',
            'class': 'logging.StreamHandler', 
        },
    },
    'loggers': {
        'django': { 
            'handlers': ['console'], 
            'level': 'DEBUG',
            'propagate': True, 
        },
    },
}


### File: ./backend/manage.py

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


### File: ./backend/urls.py

# encrypted-file-transfer/backend/urls.py

from django.urls import path, include
from views import index

urlpatterns = [
    path('api/', include('core.urls')),
    path('', index, name='index'), 
]


### File: ./backend/views.py

# encrypted-file-transfer/backend/views.py

from django.shortcuts import render
from django.http import HttpResponse
from django.conf import settings
import os
from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def index(request):
  try:
    with open(os.path.join(settings.REACT_APP_DIR, 'index.html')) as f:
      return HttpResponse(f.read())
  except FileNotFoundError:
    return HttpResponse(
      """
      This URL is only accessible after you've built the React frontend.
      """,
      status=501,
    )


### File: ./backend/wsgi.py

print("WSGI file loaded")
"""
WSGI config for project.

It exposes the WSGI callable as a module-level variable named ``application``.
"""

import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')

application = get_wsgi_application()

### File: ./backend/core/models.py

# encrypted-file-transfer/backend/core/models.py

from django.db import models
import uuid

class EncryptedFile(models.Model):
    id = models.AutoField(primary_key=True)
    uuid = models.UUIDField(default=uuid.uuid4, editable=False)
    key = models.BinaryField()
    iv = models.BinaryField()

### File: ./backend/core/__init__.py



### File: ./backend/core/apps.py

from django.apps import AppConfig


class CoreConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "core"


### File: ./backend/core/admin.py

from django.contrib import admin

# Register your models here.


### File: ./backend/core/crypto_utils.py

# encrypted-file-transfer/backend/core/crypto_utils.py

from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding as sym_padding
from cryptography.hazmat.backends import default_backend
import os

def generate_key_iv():
    """
    Generates a new AES-256 key and IV.
    """
    key = os.urandom(32)  # AES-256 key
    iv = os.urandom(16)  # AES block size is 128 bits
    return key, iv

def encrypt_aes(data, key, iv):
    """
    Encrypts data using AES-256-CBC.
    """
    padder = sym_padding.PKCS7(128).padder()
    padded_data = padder.update(data) + padder.finalize()
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    return encryptor.update(padded_data) + encryptor.finalize()

def decrypt_aes(data, key, iv):
    """
    Decrypts data using AES-256-CBC.
    """
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    decrypted_data = decryptor.update(data) + decryptor.finalize()
    unpadder = sym_padding.PKCS7(128).unpadder()
    return unpadder.update(decrypted_data) + unpadder.finalize()

### File: ./backend/core/tests.py

from django.test import TestCase

# Create your tests here.


### File: ./backend/core/urls.py

# encrypted-file-transfer/backend/core/urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('process_file/', views.file_process_view, name='file_process_view'),
    path('test/', views.test_endpoint, name='test_endpoint'),
    path('generate_username/', views.generate_username, name='generate_username'),
    path('register/', views.register, name='register'),
]

### File: ./backend/core/views.py

# encrypted-file-transfer/backend/core/views.py

from django.http import JsonResponse, HttpResponse

# Needed for user registration
from django.contrib.auth.models import User
from django.http import JsonResponse
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status
from rest_framework.decorators import api_view, authentication_classes, permission_classes
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework.permissions import AllowAny

from django.views.decorators.csrf import csrf_exempt
from .crypto_utils import encrypt_aes, decrypt_aes, generate_key_iv
from .models import EncryptedFile
import uuid
import base64
import logging

logger = logging.getLogger(__name__)

@csrf_exempt
def test_endpoint(request):
    return JsonResponse({"message": "Test endpoint working!"})

@csrf_exempt
def generate_username(request):
    # Directly return a JsonResponse with your name
    logger.info("The Frontend has appropriately requested information from the backend regarding the generated username.")
    return JsonResponse({'username': 'Derek Gary'})

@csrf_exempt
def file_process_view(request):
    try:
        if request.method == 'POST' and request.FILES:
            file = request.FILES['file']
            action = request.POST.get('action', '')

            logger.info(f"Processing file for action: {action}")

            if action == 'encrypt':
                key, iv = generate_key_iv()
                encrypted_data = encrypt_aes(file.read(), key, iv)
                file_uuid = uuid.uuid4()
                EncryptedFile.objects.create(uuid=file_uuid, key=key, iv=iv)
                encoded_data = base64.b64encode(encrypted_data).decode('utf-8')
                logger.info(f"File encrypted successfully with UUID: {file_uuid}")
                return JsonResponse({'uuid': str(file_uuid), 'encrypted_file': encoded_data, 'file_name': file.name + '.enc'})

            elif action == 'decrypt':
                file_uuid = uuid.UUID(request.POST.get('uuid', ''))
                encrypted_file = EncryptedFile.objects.get(uuid=file_uuid)
                decrypted_data = decrypt_aes(file.read(), encrypted_file.key, encrypted_file.iv)
                encoded_data = base64.b64encode(decrypted_data).decode('utf-8')
                original_file_name = file.name.rsplit('.enc', 1)[0]
                logger.info(f"File decrypted successfully for UUID: {file_uuid}")
                return JsonResponse({'decrypted_file': encoded_data, 'original_name': original_file_name})

        return HttpResponse('Invalid request', status=400)
    except Exception as e:
        logger.error(f"Error processing file: {e}", exc_info=True)
        return HttpResponse('Server Error', status=500)

@api_view(['POST'])
@authentication_classes([])
@permission_classes([AllowAny])
def register(request):
    username = request.data.get('username')
    password = request.data.get('password')
    email = request.data.get('email')

    if not all([username, email, password]):
        return Response({"error": "All fields are required."}, status=status.HTTP_400_BAD_REQUEST)

    if User.objects.filter(username=username).exists():
        return Response({"error": "Username already taken."}, status=status.HTTP_400_BAD_REQUEST)

    if User.objects.filter(email=email).exists():
        return Response({"error": "Email already in use."}, status=status.HTTP_400_BAD_REQUEST)

    user = User.objects.create_user(username=username, email=email, password=password)
    return Response({"message": "User registered successfully."}, status=status.HTTP_201_CREATED)

### File: ./backend/core/migrations/__init__.py



### File: ./backend/core/migrations/0001_initial.py

# Generated by Django 5.0.3 on 2024-03-10 03:53

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EncryptedFile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('key', models.BinaryField()),
                ('iv', models.BinaryField()),
            ],
        ),
    ]
